{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"InsightMonitor Documentation Welcome Welcome to the documentation for InsightMonitor , a model monitoring platform designed for easy deployment within AWS environments. This documentation will: Guide you through the setup process, configuration, and secure operation of the platform using Docker and AWS infrastructure. Detail the navigation components of the Model Monitoring app including setting up internal app configurations, creating projects, and managing the created assets. Document the tests being performed in the application. Django Configuration (Within Docker) The Django application is pre-configured and bundled within the Docker container. However, users can still customize key settings to match their specific environment using environment variables . This approach allows flexibility without modifying the container itself. Key configurable settings include: Security Keys : Configure the secret key and other cryptographic elements securely. Database Connections : Set up the database engine, user credentials, and connection details. Allowed Hosts : Define the allowed hosts for your application to ensure secure operation. Environment variables enable you to configure these settings across different environments, such as development and production. Refer to the Django Setup section for more detailed instructions on the required environment variables and how to customize your setup. In addition to configuration, the platform includes: Logging & Debugging : Pre-configured logging to track errors and debugging information in both development and production environments. Security Measures : Built-in security configurations, including end-to-end encryption , to protect sensitive data and ensure compliance with regulations like PHI . Infrastructure Setup For infrastructure deployment, AWS CloudFormation can be used to automate the setup of resources like VPC, EC2 instances, S3 buckets, and more. Templates and scripts are provided to assist with the setup. If multi-cloud support is considered in the future, Terraform offers greater flexibility for deploying across different cloud platforms. However, this documentation focuses on AWS CloudFormation to manage AWS infrastructure. Key Configuration Areas: Authentication & Authorization : Configure user roles, permissions, and policies to ensure security, with support for integrating existing systems like Azure AD or LDAP . Secrets Management : Secure access to secrets using AWS Secrets Manager or similar tools, with a focus on role-based access control and policy management. NGINX Configuration : Set up NGINX as a reverse proxy for secure traffic routing. Templates are available to help you adapt the configuration to your security standards. Performance Optimization : The platform is optimized for normal monitoring tasks using Polars to efficiently handle datasets within memory limits. For larger-than-memory monitoring, Dask or DuckDB can be utilized to scale the platform. Security Protocols : The platform provides end-to-end encryption for sensitive data, including configurations for PHI (Protected Health Information) compliance. Encryption can be globally enforced or configured on a per-project basis. Getting Started For new users, we recommend starting with the Quickstart Guide for an overview of basic setup and configuration. This includes setting up the Docker container, configuring environment variables, and deploying the application. Advanced topics such as custom authentication integration , NGINX configuration , and role-based access control can be found in their respective sections. Refer to the side navigation for detailed instructions on each topic.","title":"Home"},{"location":"#welcome","text":"Welcome to the documentation for InsightMonitor , a model monitoring platform designed for easy deployment within AWS environments. This documentation will: Guide you through the setup process, configuration, and secure operation of the platform using Docker and AWS infrastructure. Detail the navigation components of the Model Monitoring app including setting up internal app configurations, creating projects, and managing the created assets. Document the tests being performed in the application.","title":"Welcome"},{"location":"#django-configuration-within-docker","text":"The Django application is pre-configured and bundled within the Docker container. However, users can still customize key settings to match their specific environment using environment variables . This approach allows flexibility without modifying the container itself. Key configurable settings include: Security Keys : Configure the secret key and other cryptographic elements securely. Database Connections : Set up the database engine, user credentials, and connection details. Allowed Hosts : Define the allowed hosts for your application to ensure secure operation. Environment variables enable you to configure these settings across different environments, such as development and production. Refer to the Django Setup section for more detailed instructions on the required environment variables and how to customize your setup. In addition to configuration, the platform includes: Logging & Debugging : Pre-configured logging to track errors and debugging information in both development and production environments. Security Measures : Built-in security configurations, including end-to-end encryption , to protect sensitive data and ensure compliance with regulations like PHI .","title":"Django Configuration (Within Docker)"},{"location":"#infrastructure-setup","text":"For infrastructure deployment, AWS CloudFormation can be used to automate the setup of resources like VPC, EC2 instances, S3 buckets, and more. Templates and scripts are provided to assist with the setup. If multi-cloud support is considered in the future, Terraform offers greater flexibility for deploying across different cloud platforms. However, this documentation focuses on AWS CloudFormation to manage AWS infrastructure.","title":"Infrastructure Setup"},{"location":"#key-configuration-areas","text":"Authentication & Authorization : Configure user roles, permissions, and policies to ensure security, with support for integrating existing systems like Azure AD or LDAP . Secrets Management : Secure access to secrets using AWS Secrets Manager or similar tools, with a focus on role-based access control and policy management. NGINX Configuration : Set up NGINX as a reverse proxy for secure traffic routing. Templates are available to help you adapt the configuration to your security standards. Performance Optimization : The platform is optimized for normal monitoring tasks using Polars to efficiently handle datasets within memory limits. For larger-than-memory monitoring, Dask or DuckDB can be utilized to scale the platform. Security Protocols : The platform provides end-to-end encryption for sensitive data, including configurations for PHI (Protected Health Information) compliance. Encryption can be globally enforced or configured on a per-project basis.","title":"Key Configuration Areas:"},{"location":"#getting-started","text":"For new users, we recommend starting with the Quickstart Guide for an overview of basic setup and configuration. This includes setting up the Docker container, configuring environment variables, and deploying the application. Advanced topics such as custom authentication integration , NGINX configuration , and role-based access control can be found in their respective sections. Refer to the side navigation for detailed instructions on each topic.","title":"Getting Started"},{"location":"Authorization%20Setup/","text":"InsightMonitor Documentation: Setup Setup Authorization Environment Key Terminology Provider : The entity (ModelzInsights) responsible for storing the secrets in AWS Secrets Manager. Client : The entity needing access to the secrets stored by the Provider, in this case running an EC2 instance in their own AWS account. I. Accessing Provider's Secrets from Client's AWS EC2 This section explains the process for configuring access to a Provider's AWS Secrets Manager from a Client's EC2 instance. It involves creating IAM roles and policies in both the Provider's and Client's AWS accounts to ensure secure and efficient retrieval of secrets. Introduction The Provider stores the secret and grants the Client temporary access to retrieve it from AWS Secrets Manager through the Client's EC2 instance. This process involves the following steps: Set up IAM roles and policies to enable secure cross-account access. Configure AWS Secrets Manager for shared access between accounts. Retrieve the secret using ModelzInsight's application from the Client's EC2 instance. Note: This is the only scenario where the Python Dash app will access an external AWS account. Provider Setup Steps The Provider needs to create a secret, along with the required policies and roles, to facilitate secure cross-account access. Although the Client does not need to perform this setup, it is provided here to give the Client a clear understanding of the secure authorization process. \u2026 Show Steps Step 1: Create Client-specific Authorization Secret Go to Secrets Manager and create a new Secret. Secret Type = Other type of secret Input the relevant value pairs Enter a secret name, description. Hit next until you can Store the secret. Step 2: Create an IAM Policy From IAM, create a policy. Service = Secrets Manager . Hit Next Copy the permission statement below into the JSON Policy Editor in the Specify permissions section. Copy { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"secretsmanager:GetSecretValue\" ], \"Resource\": [ \"arn:aws:secretsmanager:<region>:<PROVIDER-account-id>:secret/<secret-id>\" ] } ] } In another tab, go to Secrets Manager and get the ARN. Input it into the Resource section of the permission statement. Hit Next. Enter a policy name, description, and check Secrets Manager to ensure proper input. Hit Create Policy . Step 3: Create an IAM Role for Cross-Account Access Now you need to create an IAM role that the customer's account can assume, with the policy created in the previous step attached. Create a new role in the IAM console of the owner's account. Select Another AWS account as the trusted entity type. Enter the Customer AWS Account ID as the trusted account. Attach the policy created in Step 1 to this role. Give the role a name, e.g., CustomerSecretsAccessRole . Hit Create Role You should see the below JSON in the Trust relationships section: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::<CUSTOMER-account-id>:root\" }, \"Action\": \"sts:AssumeRole\" } ] } Step 4: Allow Cross-Account Access in Secrets Manager Resource Policy This step creates a Resource permission such that only the role has access to the secret. In the Secrets Manager console, navigate to the secret you just created. Under Resource permissions, copy the below JSON Enter the Secret arn in the Resource section. This isn't technically needed, but each permission requires a Resource. Under the PrincipalArn enter the PROVIDER-account's role created in step 3. Copy { \"Version\" : \"2012-10-17\", \"Statement\" : [ { \"Effect\" : \"Deny\", \"Principal\" : \"*\", \"Action\" : \"secretsmanager:GetSecretValue\", \"Resource\" : \"arn:aws:secretsmanager:<region>:<PROVIDER-account-id>:secret/<secret-id>\", \"Condition\" : { \"StringNotEquals\" : { \"aws:PrincipalArn\" : \"arn:aws:iam::<PROVIDER-account-id>:role/<ROLE-NAME>\" } } } ] } Client Setup Steps The Client must create a(n): Policy to assume the Provider's role (see Provider instructions) IAM Role for the EC2 housing the ModelzInsights App Attach the role to the EC2 Step 1: Create an IAM Policy to Assume Owner's Role First, the Client needs to receive the Resource arn to the Provider role from the Provider (from Provider step 3). This will enable Client to assume the role using STS granting temporary access to the secret. In the IAM console, create a policy. Service = STS Paste the following JSON into the Specify permissions field. Provide the Resource ARN for the Provider's role (this will be supplied by the Provider). Copy { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"sts:AssumeRole\", \"Resource\": \"arn:aws:iam::<PROVIDER-account-id>:role/<ROLE-NAME>\" } ] } Step 2: Create a role in the Customer\u2019s account for the EC2 instance: Select \"AWS Service as the trusted entity. Select EC2 for the Use case. Hit Next. Attach the policy from Step 1 . Hit Next. Give the role a name, description, and ensure the Selected trusted entity is similar to: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"sts:AssumeRole\" ], \"Principal\": { \"Service\": [ \"ec2.amazonaws.com\" ] } } ] } Ensure the policy attached is present in Step 2: Add permissions section. Hit Create Role Step 3: Attach Role to EC2: When launching or modifying the EC2 instance, attach the role created in Step 2. If the modifying the EC2: Go to Actions -> Security -> Modify IAM Role Select the role from Step 2 and hit Update IAM role . II. Accessing Provider's Secrets from Local Environment (with an AWS account) function toggleVisibility(id) { var elem = document.getElementById(id); if (elem.style.display === \"none\") { elem.style.display = \"block\"; event.target.innerText = '... Hide Steps'; } else { elem.style.display = \"none\"; event.target.innerText = '... Show Steps'; } } function copyToClipboard(jsonId) { var content = document.getElementById(jsonId).innerText; navigator.clipboard.writeText(content).then(function() { alert('Copied to clipboard!'); }, function(err) { alert('Failed to copy: ', err); }); }","title":"Authorization Setup"},{"location":"Authorization%20Setup/#setup-authorization-environment","text":"Key Terminology Provider : The entity (ModelzInsights) responsible for storing the secrets in AWS Secrets Manager. Client : The entity needing access to the secrets stored by the Provider, in this case running an EC2 instance in their own AWS account.","title":"Setup Authorization Environment"},{"location":"Authorization%20Setup/#i-accessing-providers-secrets-from-clients-aws-ec2","text":"This section explains the process for configuring access to a Provider's AWS Secrets Manager from a Client's EC2 instance. It involves creating IAM roles and policies in both the Provider's and Client's AWS accounts to ensure secure and efficient retrieval of secrets. Introduction The Provider stores the secret and grants the Client temporary access to retrieve it from AWS Secrets Manager through the Client's EC2 instance. This process involves the following steps: Set up IAM roles and policies to enable secure cross-account access. Configure AWS Secrets Manager for shared access between accounts. Retrieve the secret using ModelzInsight's application from the Client's EC2 instance. Note: This is the only scenario where the Python Dash app will access an external AWS account. Provider Setup Steps The Provider needs to create a secret, along with the required policies and roles, to facilitate secure cross-account access. Although the Client does not need to perform this setup, it is provided here to give the Client a clear understanding of the secure authorization process. \u2026 Show Steps Step 1: Create Client-specific Authorization Secret Go to Secrets Manager and create a new Secret. Secret Type = Other type of secret Input the relevant value pairs Enter a secret name, description. Hit next until you can Store the secret. Step 2: Create an IAM Policy From IAM, create a policy. Service = Secrets Manager . Hit Next Copy the permission statement below into the JSON Policy Editor in the Specify permissions section. Copy { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"secretsmanager:GetSecretValue\" ], \"Resource\": [ \"arn:aws:secretsmanager:<region>:<PROVIDER-account-id>:secret/<secret-id>\" ] } ] } In another tab, go to Secrets Manager and get the ARN. Input it into the Resource section of the permission statement. Hit Next. Enter a policy name, description, and check Secrets Manager to ensure proper input. Hit Create Policy . Step 3: Create an IAM Role for Cross-Account Access Now you need to create an IAM role that the customer's account can assume, with the policy created in the previous step attached. Create a new role in the IAM console of the owner's account. Select Another AWS account as the trusted entity type. Enter the Customer AWS Account ID as the trusted account. Attach the policy created in Step 1 to this role. Give the role a name, e.g., CustomerSecretsAccessRole . Hit Create Role You should see the below JSON in the Trust relationships section: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::<CUSTOMER-account-id>:root\" }, \"Action\": \"sts:AssumeRole\" } ] } Step 4: Allow Cross-Account Access in Secrets Manager Resource Policy This step creates a Resource permission such that only the role has access to the secret. In the Secrets Manager console, navigate to the secret you just created. Under Resource permissions, copy the below JSON Enter the Secret arn in the Resource section. This isn't technically needed, but each permission requires a Resource. Under the PrincipalArn enter the PROVIDER-account's role created in step 3. Copy { \"Version\" : \"2012-10-17\", \"Statement\" : [ { \"Effect\" : \"Deny\", \"Principal\" : \"*\", \"Action\" : \"secretsmanager:GetSecretValue\", \"Resource\" : \"arn:aws:secretsmanager:<region>:<PROVIDER-account-id>:secret/<secret-id>\", \"Condition\" : { \"StringNotEquals\" : { \"aws:PrincipalArn\" : \"arn:aws:iam::<PROVIDER-account-id>:role/<ROLE-NAME>\" } } } ] } Client Setup Steps The Client must create a(n): Policy to assume the Provider's role (see Provider instructions) IAM Role for the EC2 housing the ModelzInsights App Attach the role to the EC2 Step 1: Create an IAM Policy to Assume Owner's Role First, the Client needs to receive the Resource arn to the Provider role from the Provider (from Provider step 3). This will enable Client to assume the role using STS granting temporary access to the secret. In the IAM console, create a policy. Service = STS Paste the following JSON into the Specify permissions field. Provide the Resource ARN for the Provider's role (this will be supplied by the Provider). Copy { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": \"sts:AssumeRole\", \"Resource\": \"arn:aws:iam::<PROVIDER-account-id>:role/<ROLE-NAME>\" } ] } Step 2: Create a role in the Customer\u2019s account for the EC2 instance: Select \"AWS Service as the trusted entity. Select EC2 for the Use case. Hit Next. Attach the policy from Step 1 . Hit Next. Give the role a name, description, and ensure the Selected trusted entity is similar to: { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Effect\": \"Allow\", \"Action\": [ \"sts:AssumeRole\" ], \"Principal\": { \"Service\": [ \"ec2.amazonaws.com\" ] } } ] } Ensure the policy attached is present in Step 2: Add permissions section. Hit Create Role Step 3: Attach Role to EC2: When launching or modifying the EC2 instance, attach the role created in Step 2. If the modifying the EC2: Go to Actions -> Security -> Modify IAM Role Select the role from Step 2 and hit Update IAM role .","title":"I. Accessing Provider's Secrets from Client's AWS EC2"},{"location":"Authorization%20Setup/#ii-accessing-providers-secrets-from-local-environment-with-an-aws-account","text":"function toggleVisibility(id) { var elem = document.getElementById(id); if (elem.style.display === \"none\") { elem.style.display = \"block\"; event.target.innerText = '... Hide Steps'; } else { elem.style.display = \"none\"; event.target.innerText = '... Show Steps'; } } function copyToClipboard(jsonId) { var content = document.getElementById(jsonId).innerText; navigator.clipboard.writeText(content).then(function() { alert('Copied to clipboard!'); }, function(err) { alert('Failed to copy: ', err); }); }","title":"II. Accessing Provider's Secrets from Local Environment (with an AWS account)"},{"location":"specimen/","text":"Cinder Theme Specimen Typography Typefaces Headers: Inter Body: Open Sans Code: Hack Body Copy You think water moves fast? You should see ice. It moves like it has a mind . Like it knows it killed the world once and got a taste for murder. After the avalanche, it took us a week to climb out . Now, I don't know exactly when we turned on each other, but I know that seven of us survived the slide... and only five made it out. Now we took an oath, that I'm breaking now. We said we'd say it was the snow that killed the other two, but it wasn't. Nature is lethal but it doesn't hold a candle to man. Like inline code? Here is a string for you 010101010 . Lead Body Copy Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus. Headings All HTML headings, <h1> through <h6> , are available. .h1 through .h6 classes are also available, for when you want to match the font styling of a heading but still want your text to be displayed inline. h1. Heading h2. Heading h3. Heading h4. Heading h5. Heading h6. Heading h1. Heading Secondary text h2. Heading Secondary text h3. Heading Secondary text h4. Heading Secondary text h5. Heading Secondary text h6. Heading Secondary text Blockquotes Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Someone famous in Source Title Lists mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Horizontal Description Lists Something This is something SomethingElse This is something else Contextual Colors Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Code Inline Code This is an example of inline code #import requests Preformatted Code Blocks with Syntax Highlighting def request(method, url, **kwargs): \"\"\"Constructs and sends a :class:`Request `. Usage:: >>> import requests >>> req = requests.request('GET', 'https://httpbin.org/get') \"\"\" # By using the 'with' statement we are sure the session is closed, thus we # avoid leaving sockets open which can trigger a ResourceWarning in some # cases, and look like a memory leak in others. with sessions.Session() as session: return session.request(method=method, url=url, **kwargs) def get(url, params=None, **kwargs): r\"\"\"Sends a GET request. :param url: URL for the new :class:`Request` object. :param params: (optional) Dictionary, list of tuples or bytes to send in the body of the :class:`Request`. :param \\*\\*kwargs: Optional arguments that ``request`` takes. :return: :class:`Response ` object :rtype: requests.Response \"\"\" kwargs.setdefault('allow_redirects', True) return request('get', url, params=params, **kwargs) (Source code sample from the Python requests library , Apache License, v2.0 ) Syntax highlighting support is available for and of the following languages listed on the highlightjs website . See the mkdocs \"styling your docs\" hljs_languages section for info on how to load languages dynamically. Note Include source code formatted in Github-flavored Markdown fenced code blocks with an info string that defines the supported programming language to automate syntax highlighting when your site is built. Tables Striped Table # Head 1 Head 2 Head 3 1 Box 1 Box 2 Box 3 2 Box 4 Box 5 Box 6 3 Box 7 Box 8 Box 9 Bordered Table # Head 1 Head 2 Head 3 1 Box 1 Box 2 Box 3 2 Box 4 Box 5 Box 6 3 Box 7 Box 8 Box 9 Buttons Default Buttons Link Button Styled Buttons Default Primary Success Info Warning Danger Button Sizes Large button Large button Default button Default button Small button Small button Extra small button Extra small button Block Level Buttons Block level button Block level button Alerts A simple primary alert\u2014check it out! A simple secondary alert\u2014check it out! A simple success alert\u2014check it out! A simple danger alert\u2014check it out! A simple warning alert\u2014check it out! A simple info alert\u2014check it out! A simple light alert\u2014check it out! A simple dark alert\u2014check it out! Callouts Default Callout This is a default callout. Primary Callout This is a primary callout. Success Callout This is a success callout. Info Callout This is an info callout. Warning Callout This is a warning callout. Danger Callout This is a danger callout. Admonitions The following admonitions are formatted like the callouts above but can be implemented in Markdown when you include the admonition Markdown extension in your mkdocs.yml file. Add the following setting to mkdocs.yml : markdown_extensions: - admonition and then follow the instructions in the extension documentation to author admonitions in your documentation. Cinder currently supports note , warning , and danger admonition types. !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. <pre><code> \\# this is a note def func(arg) { \\# notable things are in here! return None } </code></pre> !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. <pre><code> \\# this is a warning def func(arg) { \\# be careful! return None } </code></pre> !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. <pre><code> \\# this is dangerous def func(arg) { \\# BOOM! return None } </code></pre>","title":"Specimen"},{"location":"specimen/#typography","text":"","title":"Typography"},{"location":"specimen/#typefaces","text":"Headers: Inter Body: Open Sans Code: Hack","title":"Typefaces"},{"location":"specimen/#body-copy","text":"You think water moves fast? You should see ice. It moves like it has a mind . Like it knows it killed the world once and got a taste for murder. After the avalanche, it took us a week to climb out . Now, I don't know exactly when we turned on each other, but I know that seven of us survived the slide... and only five made it out. Now we took an oath, that I'm breaking now. We said we'd say it was the snow that killed the other two, but it wasn't. Nature is lethal but it doesn't hold a candle to man. Like inline code? Here is a string for you 010101010 .","title":"Body Copy"},{"location":"specimen/#lead-body-copy","text":"Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus.","title":"Lead Body Copy"},{"location":"specimen/#headings","text":"All HTML headings, <h1> through <h6> , are available. .h1 through .h6 classes are also available, for when you want to match the font styling of a heading but still want your text to be displayed inline.","title":"Headings"},{"location":"specimen/#blockquotes","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Someone famous in Source Title","title":"Blockquotes"},{"location":"specimen/#lists","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Lists"},{"location":"specimen/#horizontal-description-lists","text":"Something This is something SomethingElse This is something else","title":"Horizontal Description Lists"},{"location":"specimen/#contextual-colors","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.","title":"Contextual Colors"},{"location":"specimen/#code","text":"","title":"Code"},{"location":"specimen/#inline-code","text":"This is an example of inline code #import requests","title":"Inline Code"},{"location":"specimen/#tables","text":"","title":"Tables"},{"location":"specimen/#striped-table","text":"# Head 1 Head 2 Head 3 1 Box 1 Box 2 Box 3 2 Box 4 Box 5 Box 6 3 Box 7 Box 8 Box 9","title":"Striped Table"},{"location":"specimen/#bordered-table","text":"# Head 1 Head 2 Head 3 1 Box 1 Box 2 Box 3 2 Box 4 Box 5 Box 6 3 Box 7 Box 8 Box 9","title":"Bordered Table"},{"location":"specimen/#buttons","text":"","title":"Buttons"},{"location":"specimen/#default-buttons","text":"Link Button","title":"Default Buttons"},{"location":"specimen/#styled-buttons","text":"Default Primary Success Info Warning Danger","title":"Styled Buttons"},{"location":"specimen/#button-sizes","text":"Large button Large button Default button Default button Small button Small button Extra small button Extra small button","title":"Button Sizes"},{"location":"specimen/#block-level-buttons","text":"Block level button Block level button","title":"Block Level Buttons"},{"location":"specimen/#alerts","text":"A simple primary alert\u2014check it out! A simple secondary alert\u2014check it out! A simple success alert\u2014check it out! A simple danger alert\u2014check it out! A simple warning alert\u2014check it out! A simple info alert\u2014check it out! A simple light alert\u2014check it out! A simple dark alert\u2014check it out!","title":"Alerts"},{"location":"specimen/#callouts","text":"","title":"Callouts"},{"location":"specimen/#admonitions","text":"The following admonitions are formatted like the callouts above but can be implemented in Markdown when you include the admonition Markdown extension in your mkdocs.yml file. Add the following setting to mkdocs.yml : markdown_extensions: - admonition and then follow the instructions in the extension documentation to author admonitions in your documentation. Cinder currently supports note , warning , and danger admonition types. !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. <pre><code> \\# this is a note def func(arg) { \\# notable things are in here! return None } </code></pre> !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. <pre><code> \\# this is a warning def func(arg) { \\# be careful! return None } </code></pre> !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. <pre><code> \\# this is dangerous def func(arg) { \\# BOOM! return None } </code></pre>","title":"Admonitions"}]}